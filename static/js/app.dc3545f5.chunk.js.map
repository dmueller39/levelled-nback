{"version":3,"sources":["src/common/shuffle.js","src/gameLogic.js","src/components/Grid.js","src/common/WebKeyboardListener.web.js","src/components/Game.js","src/progressMap.js","src/components/MemoryDemo.js","src/components/Demo.js","src/components/LocationButton.js","src/components/LevelInfo.js","src/components/GameLevel.js","src/components/HeaderHint.js","src/components/MapImage.js","src/components/Map.js","src/components/Menu.js","src/components/NBack.js","src/constants.js","src/MainNBack.js","App.js","web-build/register-service-worker.js"],"names":["shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","getEmptyStateSquares","gamePlan","result","i","rows","columns","push","getGameIndex","index","getCurrentIndex","startTime","now","interval","offDuration","onDuration","getRandomNBackArray","turns","max","nBack","matches","matchLocations","randomMatchLocations","position","getGamePlan","gameLevel","isPractice","positionsEnabled","colorsEnabled","colorValues","turnsPerMinute","positions","colors","gameTurns","getInitialGameState","isRunning","positionButtonState","colorButtonState","squares","mistakes","getGameStateOnPositionPress","gameState","gameIndex","getGameStateOnColorPress","getGameStateOnTick","squareIndex","colorIndex","needsMore","NBackGrid","_getColor","props","views","this","squareWidth","width","margin","squareHeight","height","j","key","viewStyle","left","top","backgroundColor","View","style","styles","square","React","StyleSheet","create","HAS_TOUCH_SCREEN","hasTouchScreen","navigator","maxTouchPoints","msMaxTouchPoints","mQ","window","matchMedia","media","UA","userAgent","test","detectTouchScreen","WebKeyboardListener","componentDidMount","a","async","document","addEventListener","_onKeyDown","componentWillUnmount","removeEventListener","evt","inputKey","onKeyPress","children","Dimensions","get","InputElement","buttonColor","disabled","callback","name","inputContainer","TouchableOpacity","onPress","Text","buttonText","disabledInputKey","DefaultState","Game","state","_unsubscribe","_clearTimer","_timer","clearInterval","_endGame","onCompleteGame","_checkForVibration","prevGameState","console","log","Vibration","vibrate","_onPressPosition","Date","setState","_onPressColor","_tick","_updateState","time","_start","addBlurListener","setInterval","buttons","positionButton","_renderButton","colorButton","dimension","min","windowHeight","windowWidth","container","buttonContainer","isDebug","pointerEvents","debugText","JSON","stringify","flexDirection","justifyContent","color","padding","fontSize","right","bottom","flex","alignItems","getMasteryLevel","gameResults","results","last3MasteryLevels","foundResultIndex","getProgressMap","unsortedGameResults","gameSettings","progressMap","offset","minTurns","spacing","minTurnsPerMinute","maxTurns","steps","maxTurnsPerMinute","minNBack","maxNBack","sort","b","totalSteps","outline","dual","nodeType","map","outlineItem","item","locations","squaresForTurn","turn","squareCount","getColor","items","currentStep","getDisplay","getOpacity","getBorderColor","MemoryDemo","rowHeight","grids","positionArrowDisplay","opacity","borderColor","heightStyle","gridContainer","iconContainer","display","borderWidth","ScrollView","contentContainerStyle","header","spacer","text","textAlign","getButtonState","GameDemo","halfWidth","gameContainer","getFill","masteryLevel","LocationButton","_onPress","fill1","fill2","fill3","cx","cy","r","fill","stroke","strokeWidth","LevelInfo","_onStart","location","onStart","_onDemo","isDemo","_onCancel","onCancel","demoGamePlan","hContainer","cancelButton","playButton","headerText","fontWeight","practiceButton","marginRight","practiceInfoButton","hspacer","cancel","nbacktext","GameLevel","isPlaying","_onDimensionsChange","_onCompleteGame","POSITIONS","generateState","settings","HeaderHint","prevProps","step","isLast","getSquaresForStep","MapImage","forEach","y","x","loc","onPressLocation","getBGFill","Menu","scrollView","_onPressLocation","_onPressLeft","onUpdateNBack","_onPressRight","_renderArrowButton","icon","iconButton","paddingTop","paddingBottom","filter","_renderHeader","_renderGuide","currentLocation","setLocation","storePosition","NBack","useState","DEFAULT_SETTINGS","weeklyGoal","MainNBack","setPosition","setResults","useEffect","body","setBodyStyle","AsyncStorage","getItem","pval","parseInt","loadAll","onmessage","e","data","startsWith","href","res","split","slice","parse","postMessage","updated","setItem","message","p","toString","App","serviceWorker","register","scope","then","info","catch","error"],"mappings":"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","file":"static/js/app.dc3545f5.chunk.js","sourcesContent":["export default function shuffle<T>(array: Array<T>): Array<T> {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n","// @flow\n\nimport shuffle from \"./common/shuffle\";\n\nexport const HIDDEN: ButtonState = 0;\nexport const DISABLED: ButtonState = 1;\nexport const NEUTRAL: ButtonState = 2;\nexport const CORRECT: ButtonState = 3;\nexport const INCORRECT: ButtonState = 4;\n\nexport const DEFAULT_SETTINGS: Settings = {\n  nBack: 2,\n  rows: 3,\n  columns: 3,\n  turns: 20,\n  positionsEnabled: true,\n  colorsEnabled: true,\n  colorValues: [\"red\", \"blue\", \"green\", \"yellow\", \"orange\", \"purple\"],\n  onDuration: 4000,\n  offDuration: 1000,\n  progressMap: {\n    offset: 0,\n    spacing: 3,\n    minTurns: 4,\n    maxTurns: 20,\n    minTurnsPerMinute: 10,\n    maxTurnsPerMinute: 10,\n    steps: 9,\n    minNBack: 1,\n    maxNBack: 10,\n  },\n  weeklyGoal: 7,\n};\n\nexport type ButtonState = 0 | 1 | 2 | 3 | 4;\n\nexport type Settings = {\n  nBack: number,\n  rows: number,\n  columns: number,\n  turns: number,\n  positionsEnabled: boolean,\n  colorsEnabled: boolean,\n  colorValues: string[],\n  onDuration: number,\n  offDuration: number,\n  debugEnabled?: boolean,\n  progressMap: {\n    offset: number,\n    spacing: number,\n    minTurns: number,\n    maxTurns: number,\n    minTurnsPerMinute: number,\n    maxTurnsPerMinute: number,\n    steps: number,\n    minNBack: number,\n    maxNBack: number,\n  },\n  weeklyGoal: number,\n};\n\nexport type GameLevel = {\n  nBack: number,\n  rows: number,\n  columns: number,\n  positionsEnabled: boolean,\n  colorsEnabled: boolean,\n  colorValues: string[],\n  turns: number,\n  turnsPerMinute: number,\n};\n\nexport type GamePlan = {\n  nBack: number,\n  rows: number,\n  columns: number,\n  gameTurns: number,\n  positions: ?(number[]),\n  colors: ?(number[]),\n  colorValues: string[],\n  onDuration: number,\n  offDuration: number,\n  isPractice: boolean,\n};\n\nexport type GameResult = {\n  mistakes: number,\n  time: number,\n  gamePlan: GamePlan,\n};\n\nexport type GameState = {\n  isRunning: boolean,\n  currentIndex: number,\n  positionButtonState: ButtonState,\n  colorButtonState: ButtonState,\n  squares: string[],\n  mistakes: number,\n};\n\nfunction getEmptyStateSquares(gamePlan: GamePlan): string[] {\n  const result = [];\n  for (let i = 0; i < gamePlan.rows * gamePlan.columns; i++) {\n    result.push(\"white\");\n  }\n  return result;\n}\n\nfunction getGameIndex(index: number): number {\n  if (index % 2 == 0) {\n    return index / 2;\n  } else {\n    return (index - 1) / 2;\n  }\n}\n\nexport function getCurrentIndex(\n  gamePlan: GamePlan,\n  startTime: number,\n  now: number\n): number {\n  const interval = now - startTime - gamePlan.offDuration;\n  if (interval < 0) {\n    return -1;\n  }\n  const base =\n    Math.floor(interval / (gamePlan.offDuration + gamePlan.onDuration)) * 2;\n  const extra =\n    interval % (gamePlan.offDuration + gamePlan.onDuration) >\n    gamePlan.onDuration\n      ? 1\n      : 0;\n  return base + extra;\n}\n\nfunction getRandomNBackArray(turns, max, nBack): number[] {\n  const matches = turns * (0.2 + Math.random() * 0.1);\n\n  const matchLocations: Array<boolean> = [];\n\n  for (let i = 0; i < turns; i++) {\n    if (i < matches) {\n      matchLocations.push(true);\n    } else {\n      matchLocations.push(false);\n    }\n  }\n\n  const randomMatchLocations = shuffle(matchLocations);\n\n  const result = [];\n  for (let i = 0; i < turns + nBack; i++) {\n    let position = Math.floor(Math.random() * max);\n    if (i >= nBack) {\n      if (randomMatchLocations[i - nBack]) {\n        position = result[i - nBack];\n      } else if (position == result[i - nBack]) {\n        position = Math.floor(Math.random() * max);\n      }\n    }\n    result.push(position);\n  }\n  return result;\n}\n\nexport function getGamePlan(\n  gameLevel: GameLevel,\n  isPractice: boolean = false\n): GamePlan {\n  const {\n    nBack,\n    turns,\n    positionsEnabled,\n    colorsEnabled,\n    colorValues,\n    turnsPerMinute,\n  } = gameLevel;\n  let { rows, columns } = gameLevel;\n  if (!positionsEnabled) {\n    rows = 1;\n    columns = 1;\n  }\n  const positions = positionsEnabled\n    ? getRandomNBackArray(turns, rows * columns, nBack)\n    : null;\n  const colors = colorsEnabled\n    ? getRandomNBackArray(turns, colorValues.length, nBack)\n    : null;\n\n  const onDuration = (60000.0 * 0.8) / turnsPerMinute;\n  const offDuration = (60000.0 * 0.2) / turnsPerMinute;\n  return {\n    isPractice,\n    nBack,\n    rows,\n    columns,\n    gameTurns: turns + nBack,\n    positions,\n    colors,\n    colorValues,\n    onDuration,\n    offDuration,\n  };\n}\n\nexport function getInitialGameState(gamePlan: GamePlan): GameState {\n  return {\n    isRunning: true,\n    currentIndex: -1,\n    positionButtonState: gamePlan.positions == null ? HIDDEN : DISABLED,\n    colorButtonState: gamePlan.colors == null ? HIDDEN : DISABLED,\n    squares: getEmptyStateSquares(gamePlan),\n    mistakes: 0,\n  };\n}\n\nexport function getGameStateOnPositionPress(\n  gamePlan: GamePlan,\n  gameState: GameState,\n  index: number\n): GameState {\n  let { positionButtonState, mistakes } = gameState;\n  const { positions } = gamePlan;\n  if (positions == null || positionButtonState != NEUTRAL) {\n    return gameState;\n  }\n  const gameIndex = getGameIndex(index);\n  if (gameIndex - gamePlan.nBack >= 0) {\n    if (positions[gameIndex] == positions[gameIndex - gamePlan.nBack]) {\n      positionButtonState = CORRECT;\n    } else {\n      positionButtonState = INCORRECT;\n      mistakes += 1;\n    }\n  }\n  return { ...gameState, positionButtonState, mistakes };\n}\n\nexport function getGameStateOnColorPress(\n  gamePlan: GamePlan,\n  gameState: GameState,\n  index: number\n): GameState {\n  let { colorButtonState, mistakes } = gameState;\n  const { colors } = gamePlan;\n  if (colors == null || colorButtonState != NEUTRAL) {\n    return gameState;\n  }\n  const gameIndex = getGameIndex(index);\n  if (gameIndex - gamePlan.nBack >= 0) {\n    if (colors[gameIndex] == colors[gameIndex - gamePlan.nBack]) {\n      colorButtonState = CORRECT;\n    } else {\n      colorButtonState = INCORRECT;\n      mistakes = mistakes + 1;\n    }\n  }\n  return { ...gameState, colorButtonState, mistakes };\n}\n\nexport function getGameStateOnTick(\n  gamePlan: GamePlan,\n  gameState: GameState,\n  index: number\n): GameState {\n  const gameIndex = getGameIndex(index);\n  if (gameIndex < 0) {\n    return gameState;\n  }\n  const { positions, colors, colorValues } = gamePlan;\n  const squares = getEmptyStateSquares(gamePlan);\n  if (index % 2 == 0) {\n    let squareIndex = 0;\n    if (positions != null) {\n      squareIndex = positions[gameIndex];\n    }\n    if (colors != null && colorValues != null) {\n      const colorIndex = colors[gameIndex];\n      squares[squareIndex] = colorValues[colorIndex];\n    } else {\n      squares[squareIndex] = \"grey\";\n    }\n  }\n\n  let {\n    positionButtonState,\n    colorButtonState,\n    isRunning,\n    mistakes,\n  } = gameState;\n  if (index != gameState.currentIndex) {\n    isRunning = gameIndex < gamePlan.gameTurns;\n    const needsMore = gameIndex < gamePlan.nBack;\n    if (!isRunning || needsMore) {\n      colorButtonState = gamePlan.colors == null ? HIDDEN : DISABLED;\n      positionButtonState = gamePlan.positions == null ? HIDDEN : DISABLED;\n    } else if (index % 2 === 0) {\n      colorButtonState = gamePlan.colors == null ? HIDDEN : NEUTRAL;\n      positionButtonState = gamePlan.positions == null ? HIDDEN : NEUTRAL;\n    } else if (index % 2 === 1) {\n      const gameIndex = getGameIndex(index);\n      if (gameIndex - gamePlan.nBack >= 0) {\n        if (\n          positionButtonState == NEUTRAL &&\n          gamePlan.positions != null &&\n          gamePlan.positions[gameIndex] ==\n            gamePlan.positions[gameIndex - gamePlan.nBack]\n        ) {\n          mistakes += 1;\n          positionButtonState = INCORRECT;\n        }\n        if (\n          colorButtonState == NEUTRAL &&\n          gamePlan.colors != null &&\n          gamePlan.colors[gameIndex] ==\n            gamePlan.colors[gameIndex - gamePlan.nBack]\n        ) {\n          mistakes += 1;\n          colorButtonState = INCORRECT;\n        }\n      }\n    }\n  }\n\n  return {\n    currentIndex: index,\n    positionButtonState,\n    colorButtonState,\n    isRunning,\n    squares,\n    mistakes,\n  };\n}\n","// @flow\nimport * as React from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport type { GamePlan, GameState } from \"../gameLogic\";\n\nconst Spacing = 1;\n\ntype Props = {\n  margin: number,\n  width: number,\n  height: number,\n  gameState: { squares: Array<string> },\n  gamePlan: { columns: number, rows: number },\n};\n\ntype State = void;\n\nexport default class NBackGrid extends React.Component<Props, State> {\n  _getColor = (index: number) => {\n    return this.props.gameState.squares[index];\n  };\n\n  render() {\n    const views = [];\n\n    const { columns, rows } = this.props.gamePlan;\n\n    // this won't work for customizable columns/rows, but its good enough for now\n    const squareWidth = Math.floor(\n      (this.props.width - this.props.margin * 2.0 - Spacing * (columns - 1)) /\n        columns\n    );\n\n    const squareHeight = Math.floor(\n      (this.props.height - this.props.margin * 2.0 - Spacing * (rows - 1)) /\n        rows\n    );\n\n    for (let i = 0; i < columns; i++) {\n      for (let j = 0; j < rows; j++) {\n        const key = \"\" + i + \"_\" + j;\n        const left = i * (squareWidth + Spacing) + this.props.margin;\n        const top = j * (squareHeight + Spacing) + this.props.margin;\n        const backgroundColor = this._getColor(j * rows + i);\n        const viewStyle = {\n          left,\n          top,\n          height: squareHeight,\n          width: squareWidth,\n          backgroundColor,\n        };\n        views.push(<View key={key} style={[styles.square, viewStyle]} />);\n      }\n    }\n\n    return (\n      <View style={{ width: this.props.width, height: this.props.height }}>\n        {views}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  square: {\n    backgroundColor: \"white\",\n    position: \"absolute\",\n  },\n});\n","// @flow\nimport * as React from \"react\";\nimport { Dimensions } from \"react-native\";\nimport { View } from \"react-native\";\n\ntype Props = {\n  children?: React.Node,\n  inputKey: string,\n  onKeyPress: () => void,\n};\n\nfunction detectTouchScreen() {\n  var hasTouchScreen = false;\n  if (\"maxTouchPoints\" in navigator) {\n    hasTouchScreen = navigator.maxTouchPoints > 0;\n  } else if (\"msMaxTouchPoints\" in navigator) {\n    hasTouchScreen = (navigator: any).msMaxTouchPoints > 0;\n  } else {\n    var mQ = window.matchMedia && matchMedia(\"(pointer:coarse)\");\n    if (mQ && mQ.media === \"(pointer:coarse)\") {\n      hasTouchScreen = !!mQ.matches;\n    } else if (\"orientation\" in window) {\n      hasTouchScreen = true; // deprecated, but good fallback\n    } else {\n      // Only as a last resort, fall back to user agent sniffing\n      var UA = navigator.userAgent;\n      hasTouchScreen =\n        /\\b(BlackBerry|webOS|iPhone|IEMobile)\\b/i.test(UA) ||\n        /\\b(Android|Windows Phone|iPad|iPod)\\b/i.test(UA);\n    }\n  }\n  return hasTouchScreen;\n}\n\n/* this isn't 100% accurate for our needs. We actually want\nsomething like HAS_KEYBOARD and reverse the conditions below,\nBUT this is close enough for the time being. People on touch\nscreen laptops will be left in the cold :(\n*/\nconst HAS_TOUCH_SCREEN = detectTouchScreen();\n\nexport default class WebKeyboardListener extends React.Component<Props> {\n  componentDidMount = async () => {\n    if (!HAS_TOUCH_SCREEN) {\n      document.addEventListener(\"keydown\", this._onKeyDown);\n    }\n  };\n\n  componentWillUnmount = async () => {\n    if (!HAS_TOUCH_SCREEN) {\n      document.removeEventListener(\"keydown\", this._onKeyDown);\n    }\n  };\n\n  _onKeyDown = (evt: any) => {\n    if (evt.key == this.props.inputKey) {\n      this.props.onKeyPress();\n    }\n  };\n\n  render() {\n    if (!HAS_TOUCH_SCREEN) {\n      return <View>{this.props.children}</View>;\n    }\n    return null;\n  }\n}\n","// @flow\nimport * as React from \"react\";\nimport {\n  Button,\n  Dimensions,\n  Text,\n  Vibration,\n  View,\n  StyleSheet,\n  TouchableOpacity,\n} from \"react-native\";\nimport {\n  getGameStateOnPositionPress,\n  getGameStateOnColorPress,\n  getGameStateOnTick,\n  getInitialGameState,\n  getCurrentIndex,\n  HIDDEN,\n  DISABLED,\n  NEUTRAL,\n  CORRECT,\n  INCORRECT,\n} from \"../gameLogic\";\nimport type {\n  ButtonState,\n  GamePlan,\n  GameState,\n  GameResult,\n} from \"../gameLogic\";\nimport Grid from \"./Grid\";\nimport WebKeyboardListener from \"../common/WebKeyboardListener\";\n\nconst DeviceWidth = Dimensions.get(\"window\").width;\nconst Margin = 10;\nconst Spacing = 1;\n\ntype State = {\n  gameState: GameState,\n  startTime: number,\n};\n\ntype Props = {\n  gamePlan: GamePlan,\n  isDebug: boolean,\n  windowWidth: number,\n  windowHeight: number,\n  onCompleteGame: (?GameResult) => void,\n  addBlurListener: (() => void) => () => void,\n};\n\nfunction InputElement({\n  buttonColor,\n  disabled,\n  callback,\n  name,\n  inputKey,\n}: {\n  buttonColor: string,\n  name: string,\n  disabled: boolean,\n  callback: () => void,\n  inputKey: string,\n}) {\n  return (\n    <View style={styles.inputContainer}>\n      <TouchableOpacity key={name} disabled={disabled} onPress={callback}>\n        <Text style={[styles.buttonText, { backgroundColor: buttonColor }]}>\n          {name}\n        </Text>\n      </TouchableOpacity>\n      <WebKeyboardListener inputKey={inputKey} onKeyPress={callback}>\n        <Text style={disabled ? styles.disabledInputKey : styles.inputKey}>\n          ({inputKey})\n        </Text>\n      </WebKeyboardListener>\n    </View>\n  );\n}\n\nconst DefaultState = {\n  gameState: {\n    isRunning: false,\n    positionButtonState: HIDDEN,\n    colorButtonState: HIDDEN,\n    squares: [\n      \"white\",\n      \"white\",\n      \"white\",\n      \"white\",\n      \"white\",\n      \"white\",\n      \"white\",\n      \"white\",\n      \"white\",\n    ],\n    currentIndex: -1,\n    mistakes: 0,\n  },\n  startTime: 0,\n};\n\nexport default class Game extends React.Component<Props, State> {\n  state = DefaultState;\n\n  _unsubscribe: () => void = () => {};\n\n  _clearTimer = () => {\n    if (this._timer != null) {\n      clearInterval(this._timer);\n    }\n    this._timer = null;\n  };\n\n  componentDidMount() {\n    this._start();\n    this._unsubscribe = this.props.addBlurListener(() => {\n      this._clearTimer();\n    });\n  }\n\n  componentWillUnmount() {\n    this._unsubscribe();\n    this._clearTimer();\n  }\n\n  _timer: ?IntervalID;\n\n  _start() {\n    this._timer = setInterval(this._tick, 40);\n    this.setState({\n      gameState: getInitialGameState(this.props.gamePlan),\n      startTime: Date.now(),\n    });\n  }\n\n  _endGame = (result: ?GameResult) => {\n    this.props.onCompleteGame(result);\n    return DefaultState;\n  };\n\n  _checkForVibration = (prevGameState: GameState, gameState: GameState) => {\n    if (\n      (gameState.positionButtonState == INCORRECT &&\n        prevGameState.positionButtonState != INCORRECT) ||\n      (gameState.colorButtonState == INCORRECT &&\n        prevGameState.colorButtonState != INCORRECT)\n    ) {\n      console.log(\"vibrating\");\n      Vibration.vibrate();\n    }\n  };\n\n  _onPressPosition: () => void = () => {\n    const currentIndex = getCurrentIndex(\n      this.props.gamePlan,\n      this.state.startTime,\n      Date.now()\n    );\n    const gameState = getGameStateOnPositionPress(\n      this.props.gamePlan,\n      this.state.gameState,\n      currentIndex\n    );\n    this._checkForVibration(this.state.gameState, gameState);\n    this.setState({ gameState });\n  };\n\n  _onPressColor = () => {\n    const currentIndex = getCurrentIndex(\n      this.props.gamePlan,\n      this.state.startTime,\n      Date.now()\n    );\n    const gameState = getGameStateOnColorPress(\n      this.props.gamePlan,\n      this.state.gameState,\n      currentIndex\n    );\n    this._checkForVibration(this.state.gameState, gameState);\n    this.setState({ gameState });\n  };\n\n  _tick = () => {\n    this.setState(this._updateState);\n  };\n\n  _updateState = (state: State) => {\n    let positionButtonState = this.state.gameState.positionButtonState;\n    if (state.gameState.isRunning) {\n      const currentIndex = getCurrentIndex(\n        this.props.gamePlan,\n        this.state.startTime,\n        Date.now()\n      );\n      const gameState = getGameStateOnTick(\n        this.props.gamePlan,\n        this.state.gameState,\n        currentIndex\n      );\n      if (gameState.isRunning == false) {\n        // reset the game\n        return this._endGame({\n          mistakes: gameState.mistakes,\n          time: Date.now(),\n          gamePlan: this.props.gamePlan,\n        });\n      } else {\n        this._checkForVibration(this.state.gameState, gameState);\n        return {\n          gameState,\n        };\n      }\n    }\n    return {};\n  };\n\n  _renderButton(\n    name: string,\n    inputKey: string,\n    state: ButtonState,\n    callback: () => void\n  ) {\n    if (state != HIDDEN) {\n      let buttonColor = \"#8888FF\";\n      let disabled = false;\n      switch (state) {\n        case CORRECT:\n          buttonColor = \"#88FF88\";\n          break;\n        case INCORRECT:\n          buttonColor = \"#FF8888\";\n          break;\n        case DISABLED:\n          buttonColor = \"#CCCCFF\";\n          disabled = true;\n          break;\n      }\n\n      return (\n        <InputElement\n          key={inputKey}\n          name={name}\n          buttonColor={buttonColor}\n          disabled={disabled}\n          callback={callback}\n          inputKey={inputKey}\n        />\n      );\n    }\n    return null;\n  }\n\n  render() {\n    const views = [];\n\n    const buttons = [];\n    const positionButton = this._renderButton(\n      \"position\",\n      \"a\",\n      this.state.gameState.positionButtonState,\n      this._onPressPosition\n    );\n    if (positionButton != null) {\n      buttons.push(positionButton);\n    }\n    const colorButton = this._renderButton(\n      \"color\",\n      \"l\",\n      this.state.gameState.colorButtonState,\n      this._onPressColor\n    );\n    if (colorButton != null) {\n      buttons.push(colorButton);\n    }\n\n    const dimension = Math.min(\n      this.props.windowHeight - 200,\n      this.props.windowWidth\n    );\n\n    return (\n      <View\n        style={[\n          styles.container,\n          { width: this.props.windowWidth, height: this.props.windowHeight },\n        ]}\n      >\n        <Grid\n          width={dimension}\n          height={dimension}\n          margin={Margin}\n          gamePlan={this.props.gamePlan}\n          gameState={this.state.gameState}\n        />\n        <View\n          style={[styles.buttonContainer, { width: this.props.windowWidth }]}\n        >\n          {buttons}\n        </View>\n        {this.props.isDebug ? (\n          <View pointerEvents=\"none\" style={styles.debugText}>\n            <Text pointerEvents=\"none\" style={styles.debugText}>\n              {JSON.stringify(this.state.gameState, null, \"\\t\")}\n              {JSON.stringify(this.props.gamePlan, null, \"\\t\")}\n            </Text>\n          </View>\n        ) : null}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  buttonContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-evenly\",\n  },\n  buttonText: {\n    justifyContent: \"center\",\n    color: \"white\",\n    padding: 10,\n    fontSize: 24,\n  },\n  debugText: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    fontSize: 10,\n  },\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    padding: 8,\n  },\n  inputContainer: {\n    alignItems: \"center\",\n  },\n  disabledInputKey: {\n    color: \"#888888\",\n  },\n  inputKey: {\n    color: \"#111111\",\n  },\n});\n","// @flow\nimport type { GamePlan, GameResult, Settings, GameLevel } from \"./gameLogic\";\n\nexport const NODE_START: ProgressMapLocationNodeType = 0;\nexport const NODE_DEFAULT: ProgressMapLocationNodeType = 1;\nexport const NODE_END: ProgressMapLocationNodeType = 2;\n\nexport type ProgressMapLocationNodeType = 0 | 1 | 2;\n\nexport type MasteryLevel = 0 | 1 | 2 | 3;\n\n// the player has played the level, but hasn't mastered it\nexport const MASTERY_LEVEL_NONE: MasteryLevel = 0;\n// the player has played the level, but hasn't mastered it\nexport const MASTERY_LEVEL_IN_PROGRESS: MasteryLevel = 1;\n// the player mastered the level by playing it\nexport const MASTERY_LEVEL_MASTERED: MasteryLevel = 2;\n// the player jumped ahead and mastered a more difficult level\nexport const MASTERY_LEVEL_SKIPPED: MasteryLevel = 3;\n\nexport type ProgressMapLocation = {\n  last3MasteryLevels: [MasteryLevel, MasteryLevel, MasteryLevel],\n  results: GameResult[],\n  gameLevel: GameLevel,\n  nodeType: ProgressMapLocationNodeType,\n};\n\nexport type ProgressMapDataItem = {\n  key: string,\n  locations: [?ProgressMapLocation, ?ProgressMapLocation, ?ProgressMapLocation],\n};\n\nexport type ProgressMapData = ProgressMapDataItem[];\n\ntype AbstractLevel = {\n  last3MasteryLevels: [MasteryLevel, MasteryLevel, MasteryLevel],\n  results: GameResult[],\n  nodeType: ProgressMapLocationNodeType,\n  nBack: number,\n  turns: number,\n  turnsPerMinute: number,\n};\n\ntype OutlineItem = {\n  positions: ?AbstractLevel,\n  colors: ?AbstractLevel,\n  dual: ?AbstractLevel,\n};\n\nexport function getIsMastered(location: ProgressMapLocation) {\n  return (\n    location.last3MasteryLevels[0] == MASTERY_LEVEL_MASTERED &&\n    location.last3MasteryLevels[1] == MASTERY_LEVEL_MASTERED &&\n    location.last3MasteryLevels[2] == MASTERY_LEVEL_MASTERED\n  );\n}\n\nfunction getKeyWithOutlineItem(item: OutlineItem): string {\n  return (\n    \"\" +\n    (item.positions == null\n      ? \"null\"\n      : \"\" + item.positions.nBack + \"-\" + item.positions.turns) +\n    \"-\" +\n    (item.colors == null\n      ? \"null\"\n      : \"\" + item.colors.nBack + \"-\" + item.colors.turns) +\n    \"=\" +\n    (item.dual == null ? \"null\" : \"\" + item.dual.nBack + \"-\" + item.dual.turns)\n  );\n}\n\nfunction getMasteryLevel(\n  nBack: number,\n  colorsEnabled: boolean,\n  positionsEnabled: boolean,\n  turns: number,\n  gameResults: GameResult[]\n): {\n  results: GameResult[],\n  last3MasteryLevels: [MasteryLevel, MasteryLevel, MasteryLevel],\n} {\n  let results: GameResult[] = [];\n  const last3MasteryLevels = [\n    MASTERY_LEVEL_NONE,\n    MASTERY_LEVEL_NONE,\n    MASTERY_LEVEL_NONE,\n  ];\n  let foundResultIndex = 0;\n  for (let i = 0; i < gameResults.length; i++) {\n    const { gamePlan, mistakes } = gameResults[i];\n    if (\n      gamePlan.isPractice !== true &&\n      (gamePlan.colors != null) == colorsEnabled &&\n      (gamePlan.positions != null) == positionsEnabled\n    ) {\n      if (gamePlan.nBack == nBack && gamePlan.gameTurns - nBack == turns) {\n        if (mistakes == 0) {\n          last3MasteryLevels[foundResultIndex] = MASTERY_LEVEL_MASTERED;\n        } else {\n          last3MasteryLevels[foundResultIndex] = MASTERY_LEVEL_IN_PROGRESS;\n        }\n        foundResultIndex++;\n        results.push(gameResults[i]);\n      } else if (\n        gamePlan.nBack >= nBack &&\n        gamePlan.gameTurns - gamePlan.nBack >= turns\n      ) {\n        // if they've mastered a higher level, then mark this as skipped\n        if (mistakes == 0) {\n          for (let j = foundResultIndex; j < last3MasteryLevels.length; j++) {\n            if (last3MasteryLevels[j] == MASTERY_LEVEL_NONE) {\n              last3MasteryLevels[j] = MASTERY_LEVEL_SKIPPED;\n            }\n          }\n        }\n      }\n    }\n  }\n  return {\n    last3MasteryLevels,\n    results,\n  };\n}\n\n// 0 is the lowest level in the progress map, and n is the highest\nexport function getProgressMap(\n  unsortedGameResults: GameResult[],\n  gameSettings: Settings\n): ProgressMapData {\n  const {\n    offset,\n    spacing,\n    minTurns,\n    maxTurns,\n    minTurnsPerMinute,\n    maxTurnsPerMinute,\n    steps,\n    minNBack,\n    maxNBack,\n  } = gameSettings.progressMap;\n\n  const gameResults = unsortedGameResults.sort((a, b) => b.time - a.time);\n\n  const totalSteps = offset + steps;\n  const outline: OutlineItem[] = [];\n\n  for (let i = minNBack; i <= 8; i++) {\n    for (let j = 0; j <= totalSteps; j++) {\n      let positions = null;\n      let colors = null;\n      let dual = null;\n      if (j < steps) {\n        const nBack = i;\n        const turns = j + minTurns;\n        positions = {\n          nodeType: j == 0 ? NODE_START : NODE_DEFAULT,\n          nBack: i,\n          turns: j + minTurns,\n          turnsPerMinute: minTurnsPerMinute,\n          ...getMasteryLevel(nBack, false, true, turns, gameResults),\n        };\n        colors = {\n          nodeType: j == 0 ? NODE_START : NODE_DEFAULT,\n          nBack: i,\n          turns: j + minTurns,\n          turnsPerMinute: minTurnsPerMinute,\n          ...getMasteryLevel(nBack, true, false, turns, gameResults),\n        };\n        dual = {\n          nodeType: j == offset ? NODE_START : NODE_DEFAULT,\n          nBack: i,\n          turns: j - offset + minTurns,\n          turnsPerMinute: minTurnsPerMinute,\n          ...getMasteryLevel(i, true, true, j - offset + minTurns, gameResults),\n        };\n      }\n\n      outline.push({\n        positions,\n        colors,\n        dual,\n      });\n    }\n  }\n\n  return outline.map((outlineItem) => ({\n    key: getKeyWithOutlineItem(outlineItem),\n    locations: [\n      outlineItem.positions == null\n        ? null\n        : {\n            ...outlineItem.positions,\n            gameLevel: {\n              nBack: outlineItem.positions.nBack,\n              rows: gameSettings.rows,\n              columns: gameSettings.columns,\n              positionsEnabled: true,\n              colorsEnabled: false,\n              colorValues: [\"#000000\"],\n              turns: outlineItem.positions.turns,\n              turnsPerMinute: outlineItem.positions.turnsPerMinute,\n            },\n          },\n      outlineItem.colors == null\n        ? null\n        : {\n            ...outlineItem.colors,\n            gameLevel: {\n              nBack: outlineItem.colors.nBack,\n              rows: 1,\n              columns: 1,\n              positionsEnabled: false,\n              colorsEnabled: true,\n              colorValues: gameSettings.colorValues,\n              turns: outlineItem.colors.turns,\n              turnsPerMinute: outlineItem.colors.turnsPerMinute,\n            },\n          },\n      outlineItem.dual == null\n        ? null\n        : {\n            ...outlineItem.dual,\n            gameLevel: {\n              nBack: outlineItem.dual.nBack,\n              rows: gameSettings.rows,\n              columns: gameSettings.columns,\n              positionsEnabled: true,\n              colorsEnabled: true,\n              colorValues: gameSettings.colorValues,\n              turns: outlineItem.dual.turns,\n              turnsPerMinute: outlineItem.dual.turnsPerMinute,\n            },\n          },\n    ],\n  }));\n}\n\nexport function getLastIndex(map: ProgressMapData): number {\n  const times = map\n    .map((dataItem) =>\n      dataItem.locations\n        .map((loc) => {\n          if (loc != null && loc.results != null && loc.results.length > 0) {\n            return loc.results\n              .map((result) => result.time)\n              .reduce((prev, curr) => Math.max(prev, curr), 0);\n          } else {\n            return 0;\n          }\n        })\n        .reduce((prev, curr) => Math.max(prev, curr), 0)\n    )\n    .map((time) => (Number.isNaN(time) ? 0 : time));\n\n  const maxTime = Math.max(...times);\n  return Math.max(times.indexOf(maxTime), 0);\n}\n","// @flow\nimport * as React from \"react\";\nimport {\n  Button,\n  Dimensions,\n  Text,\n  Vibration,\n  View,\n  StyleSheet,\n  TouchableOpacity,\n  ScrollView,\n} from \"react-native\";\nimport {\n  getGameStateOnPositionPress,\n  getGameStateOnColorPress,\n  getGameStateOnTick,\n  getInitialGameState,\n  getCurrentIndex,\n  HIDDEN,\n  DISABLED,\n  NEUTRAL,\n  CORRECT,\n  INCORRECT,\n} from \"../gameLogic\";\nimport type {\n  ButtonState,\n  GamePlan,\n  GameState,\n  GameResult,\n} from \"../gameLogic\";\nimport Grid from \"./Grid\";\n\ntype State = {\n  currentStep: number,\n};\n\ntype Props = {\n  gamePlan: GamePlan,\n  currentStep: number,\n  width: number,\n  height: number,\n};\n\nfunction squaresForTurn(gamePlan: GamePlan, turn: number): Array<string> {\n  const squares = [];\n  const squareCount = gamePlan.rows * gamePlan.columns;\n  for (let index = 0; index < squareCount; index++) {\n    squares.push(\"white\");\n  }\n\n  let squareIndex = 0;\n  if (gamePlan.positions != null) {\n    squareIndex = gamePlan.positions[turn];\n  }\n  if (gamePlan.colors != null && gamePlan.colorValues != null) {\n    const colorIndex = gamePlan.colors[turn];\n    squares[squareIndex] = gamePlan.colorValues[colorIndex];\n  } else {\n    squares[squareIndex] = \"grey\";\n  }\n\n  return squares;\n}\n\nfunction getColor(\n  items: ?Array<any>,\n  currentStep: number,\n  nBack: number\n): string {\n  if (items == null) {\n    return \"grey\";\n  }\n  if (currentStep < nBack) {\n    return \"grey\";\n  }\n  if (items[currentStep] == items[currentStep - nBack]) {\n    return \"green\";\n  } else {\n    return \"red\";\n  }\n}\n\nfunction getDisplay(\n  items: ?Array<any>,\n  currentStep: number,\n  nBack: number,\n  index: number\n): string {\n  if (items == null) {\n    return \"none\";\n  }\n  if (index == currentStep) {\n    return \"flex\";\n  }\n  if (index == currentStep - nBack) {\n    return \"flex\";\n  }\n  return \"none\";\n}\n\nfunction getOpacity(currentStep: number, nBack: number, index: number): number {\n  if (index == currentStep || currentStep - nBack == index) {\n    return 1.0;\n  }\n  if (currentStep - nBack < index && index < currentStep) {\n    return 0.85;\n  }\n  return 0.33;\n}\n\nfunction getBorderColor(\n  currentStep: number,\n  nBack: number,\n  index: number\n): string {\n  if (index == currentStep) {\n    return \"black\";\n  }\n  return \"transparent\";\n}\n\nexport default function MemoryDemo(props: Props) {\n  const rowHeight = Math.min(\n    Math.floor(props.height / (props.gamePlan.nBack + 1)),\n    62\n  );\n\n  const grids = [];\n\n  const currentStep = props.currentStep;\n\n  let colorArrowColor = getColor(\n    props.gamePlan.colors,\n    currentStep,\n    props.gamePlan.nBack\n  );\n  let positionArrowColor = getColor(\n    props.gamePlan.positions,\n    currentStep,\n    props.gamePlan.nBack\n  );\n\n  for (let index = 0; index < props.gamePlan.gameTurns; index++) {\n    const state = {\n      squares: squaresForTurn(props.gamePlan, index),\n    };\n    let colorArrowDisplay = getDisplay(\n      props.gamePlan.colors,\n      currentStep,\n      props.gamePlan.nBack,\n      index\n    );\n    let positionArrowDisplay = getDisplay(\n      props.gamePlan.positions,\n      currentStep,\n      props.gamePlan.nBack,\n      index\n    );\n    let opacity = getOpacity(currentStep, props.gamePlan.nBack, index);\n    let borderColor = getBorderColor(currentStep, props.gamePlan.nBack, index);\n    const heightStyle = { height: rowHeight };\n    grids.push(\n      <View\n        key={\"demo-grid-\" + index}\n        style={[styles.gridContainer, heightStyle]}\n      >\n        <View style={[styles.iconContainer, heightStyle]}>\n          <Text\n            style={{\n              fontSize: 32,\n              display: positionArrowDisplay,\n            }}\n          >\n            👉\n          </Text>\n        </View>\n        <View\n          style={{\n            height: rowHeight + 2,\n            opacity,\n            borderWidth: 2,\n            borderColor,\n          }}\n        >\n          <Grid\n            width={rowHeight}\n            height={rowHeight}\n            margin={4}\n            gamePlan={props.gamePlan}\n            gameState={state}\n          />\n        </View>\n        <View style={[styles.iconContainer, heightStyle]}>\n          <Text\n            style={{\n              fontSize: 32,\n              display: positionArrowDisplay,\n            }}\n          >\n            👈\n          </Text>\n        </View>\n      </View>\n    );\n  }\n\n  const positionText = props.gamePlan.positions != null ? \"position\" : \"\";\n  const colorText = props.gamePlan.colors != null ? \"color\" : \"\";\n\n  return (\n    <ScrollView contentContainerStyle={styles.container}>{grids}</ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    flexDirection: \"row\",\n  },\n  spacer: {\n    width: 60,\n  },\n  text: {\n    width: 80,\n    textAlign: \"center\",\n  },\n  iconContainer: {\n    height: 62,\n    width: 80,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  gridContainer: { height: 62, flexDirection: \"row\" },\n  container: {\n    alignItems: \"center\",\n    flex: 1,\n  },\n});\n","// @flow\nimport * as React from \"react\";\nimport {\n  Button,\n  Dimensions,\n  Text,\n  Vibration,\n  View,\n  StyleSheet,\n  TouchableOpacity,\n} from \"react-native\";\nimport {\n  getGameStateOnPositionPress,\n  getGameStateOnColorPress,\n  getGameStateOnTick,\n  getInitialGameState,\n  getCurrentIndex,\n  HIDDEN,\n  DISABLED,\n  NEUTRAL,\n  CORRECT,\n  INCORRECT,\n} from \"../gameLogic\";\nimport type {\n  ButtonState,\n  GamePlan,\n  GameState,\n  GameResult,\n} from \"../gameLogic\";\nimport Grid from \"./Grid\";\nimport MemoryDemo from \"./MemoryDemo\";\n\ntype State = {\n  gameState: GameState,\n  startTime: number,\n};\n\ntype Props = {\n  gamePlan: GamePlan,\n  width: number,\n  height: number,\n};\n\nconst DefaultState = {\n  gameState: {\n    isRunning: false,\n    positionButtonState: HIDDEN,\n    colorButtonState: HIDDEN,\n    squares: [\n      \"white\",\n      \"white\",\n      \"white\",\n      \"white\",\n      \"white\",\n      \"white\",\n      \"white\",\n      \"white\",\n      \"white\",\n    ],\n    currentIndex: -1,\n    mistakes: 0,\n  },\n  startTime: 0,\n};\n\nfunction getGameIndex(currentIndex: number): number {\n  return Math.floor(currentIndex / 2);\n}\n\nfunction getButtonState(\n  items: ?Array<any>,\n  currentIndex: number,\n  nBack: number\n): ButtonState {\n  if (items == null) {\n    return HIDDEN;\n  }\n  const gameIndex = getGameIndex(currentIndex);\n  if (gameIndex < nBack) {\n    return DISABLED;\n  }\n  if (currentIndex % 2) {\n    return NEUTRAL;\n  }\n  if (items[gameIndex] == items[gameIndex - nBack]) {\n    return CORRECT;\n  }\n  return INCORRECT;\n}\n\nexport default class GameDemo extends React.Component<Props, State> {\n  state = DefaultState;\n\n  componentDidMount() {\n    this._start();\n  }\n  componentWillUnmount() {\n    this._endGame();\n  }\n\n  _timer: ?IntervalID;\n\n  _start() {\n    this._timer = setInterval(this._tick, 40);\n    this.setState({\n      gameState: getInitialGameState(this.props.gamePlan),\n      startTime: Date.now(),\n    });\n  }\n\n  _endGame = () => {\n    if (this._timer != null) {\n      clearInterval(this._timer);\n    }\n    this._timer = null;\n    // restart?\n    return DefaultState;\n  };\n\n  _onPressPosition: () => void = () => {\n    const currentIndex = getCurrentIndex(\n      this.props.gamePlan,\n      this.state.startTime,\n      Date.now()\n    );\n    const gameState = getGameStateOnPositionPress(\n      this.props.gamePlan,\n      this.state.gameState,\n      currentIndex\n    );\n    this.setState({ gameState });\n  };\n\n  _onPressColor = () => {\n    const currentIndex = getCurrentIndex(\n      this.props.gamePlan,\n      this.state.startTime,\n      Date.now()\n    );\n    const gameState = getGameStateOnColorPress(\n      this.props.gamePlan,\n      this.state.gameState,\n      currentIndex\n    );\n    this.setState({ gameState });\n  };\n\n  _tick = () => {\n    this.setState(this._updateState);\n  };\n\n  _updateState = (state: State) => {\n    let positionButtonState = this.state.gameState.positionButtonState;\n    if (state.gameState.isRunning) {\n      const currentIndex = getCurrentIndex(\n        this.props.gamePlan,\n        this.state.startTime,\n        Date.now()\n      );\n      const gameState = getGameStateOnTick(\n        this.props.gamePlan,\n        this.state.gameState,\n        currentIndex\n      );\n      if (gameState.isRunning == false) {\n        // reset the game\n        return this._endGame();\n      } else {\n        return {\n          gameState,\n        };\n      }\n    }\n    return {};\n  };\n\n  _renderButton(\n    name: string,\n    state: ButtonState,\n    callback: () => void,\n    width: number\n  ) {\n    if (state != HIDDEN) {\n      let buttonColor = \"#8888FF\";\n      switch (state) {\n        case CORRECT:\n          buttonColor = \"#88FF88\";\n          break;\n        case INCORRECT:\n          buttonColor = \"#FF8888\";\n          break;\n        case DISABLED:\n          buttonColor = \"#CCCCFF\";\n          break;\n      }\n\n      return (\n        <Text\n          key={name}\n          style={[\n            styles.buttonText,\n            {\n              backgroundColor: buttonColor,\n              width: 0.3 * width,\n              fontSize: width * 0.07,\n            },\n          ]}\n        >\n          {name}\n        </Text>\n      );\n    }\n    return null;\n  }\n\n  render() {\n    const views = [];\n    const buttons = [];\n    const halfWidth = this.props.width * 0.5;\n    const gameIndex = getGameIndex(this.state.gameState.currentIndex);\n\n    const positionButton = this._renderButton(\n      \"position\",\n      getButtonState(\n        this.props.gamePlan.positions,\n        this.state.gameState.currentIndex,\n        this.props.gamePlan.nBack\n      ),\n      this._onPressPosition,\n      halfWidth\n    );\n    if (positionButton != null) {\n      buttons.push(positionButton);\n    }\n    const colorButton = this._renderButton(\n      \"color\",\n      getButtonState(\n        this.props.gamePlan.colors,\n        this.state.gameState.currentIndex,\n        this.props.gamePlan.nBack\n      ),\n      this._onPressColor,\n      halfWidth\n    );\n    if (colorButton != null) {\n      buttons.push(colorButton);\n    }\n\n    return (\n      <View style={[styles.container, { width: this.props.width }]}>\n        <View style={[styles.gameContainer, { width: halfWidth }]}>\n          <MemoryDemo\n            height={this.props.height - 2 * 8}\n            width={halfWidth}\n            gamePlan={this.props.gamePlan}\n            currentStep={gameIndex}\n          />\n        </View>\n        <View style={[styles.gameContainer, { width: halfWidth }]}>\n          <Grid\n            width={halfWidth}\n            height={halfWidth}\n            margin={0}\n            gamePlan={this.props.gamePlan}\n            gameState={this.state.gameState}\n          />\n          <View style={styles.buttonContainer}>{buttons}</View>\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  gameContainer: {},\n  buttonContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-evenly\",\n  },\n  buttonText: {\n    justifyContent: \"center\",\n    color: \"white\",\n    padding: 3,\n    textAlign: \"center\",\n  },\n  container: {\n    flex: 1,\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    padding: 8,\n  },\n});\n","// @flow\nimport * as React from \"react\";\nimport { TouchableOpacity, View, StyleSheet } from \"react-native\";\nimport Svg, { Circle } from \"react-native-svg\";\nimport type { MasteryLevel } from \"../progressMap\";\nimport {\n  MASTERY_LEVEL_IN_PROGRESS,\n  MASTERY_LEVEL_NONE,\n  MASTERY_LEVEL_MASTERED,\n  MASTERY_LEVEL_SKIPPED,\n} from \"../progressMap\";\n\ntype ViewProps = React.ElementProps<typeof View>;\ntype ViewStyleProp = $PropertyType<ViewProps, \"style\">;\n\ntype Props = {\n  onPress: () => void,\n  last3MasteryLevels: [MasteryLevel, MasteryLevel, MasteryLevel],\n  style?: ViewStyleProp,\n};\n\ntype State = {};\n\nfunction getFill(masteryLevel: MasteryLevel): string {\n  switch (masteryLevel) {\n    case MASTERY_LEVEL_MASTERED:\n      return \"green\";\n    case MASTERY_LEVEL_IN_PROGRESS:\n      return \"yellow\";\n    case MASTERY_LEVEL_SKIPPED:\n      return \"#DDDDDD\";\n  }\n  return \"white\";\n}\n\nexport default class LocationButton extends React.Component<Props, State> {\n  _onPress = () => {\n    this.props.onPress();\n  };\n\n  render() {\n    const fill1 = getFill(this.props.last3MasteryLevels[0]);\n    const fill2 = getFill(this.props.last3MasteryLevels[1]);\n    const fill3 = getFill(this.props.last3MasteryLevels[2]);\n    return (\n      <TouchableOpacity\n        style={[styles.container, this.props.style]}\n        onPress={this._onPress}\n      >\n        <Svg height=\"44\" width=\"44\">\n          <Circle\n            cx=\"22\"\n            cy=\"22\"\n            r=\"14\"\n            fill={fill1}\n            stroke=\"black\"\n            strokeWidth={1}\n          />\n          <Circle cx=\"22\" cy=\"22\" r=\"9\" fill={fill2} />\n          <Circle cx=\"22\" cy=\"22\" r=\"4\" fill={fill3} />\n        </Svg>\n      </TouchableOpacity>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 44,\n    width: 44,\n  },\n});\n","// @flow\nimport * as React from \"react\";\n\nimport {\n  Alert,\n  Button,\n  StyleSheet,\n  Text,\n  TouchableHighlight,\n  TouchableOpacity,\n  TouchableWithoutFeedback,\n  View,\n} from \"react-native\";\nimport type { GameLevel, GamePlan, GameResult, Settings } from \"../gameLogic\";\nimport {\n  MASTERY_LEVEL_MASTERED,\n  getIsMastered,\n  getProgressMap,\n} from \"../progressMap\";\nimport type { MasteryLevel, ProgressMapLocation } from \"../progressMap\";\n\nimport Demo from \"./Demo\";\nimport LocationButton from \"./LocationButton\";\nimport { getGamePlan } from \"../gameLogic\";\n\ntype ViewProps = React.ElementProps<typeof View>;\ntype ViewStyleProp = $PropertyType<ViewProps, \"style\">;\ntype Props = {\n  location: ProgressMapLocation,\n  windowWidth: number,\n  windowHeight: number,\n  onStart: (GamePlan) => void,\n  onCancel: () => void,\n};\n\ntype State = { demoGamePlan: GamePlan, isDemo: boolean };\n\nexport default class LevelInfo extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    const demoGamePlan = getGamePlan(this.props.location.gameLevel);\n    this.state = {\n      demoGamePlan,\n      isDemo: false,\n    };\n  }\n\n  _onStart = () => {\n    const gamePlan = getGamePlan(this.props.location.gameLevel);\n    this.props.onStart(gamePlan);\n  };\n\n  _onDemo = () => {\n    this.setState({\n      isDemo: true,\n    });\n  };\n\n  _onCancel = () => {\n    if (this.state.isDemo) {\n      this.setState({\n        isDemo: false,\n      });\n    } else {\n      this.props.onCancel();\n    }\n  };\n\n  render() {\n    if (this.state.isDemo) {\n      return (\n        <View\n          style={[\n            {\n              width: this.props.windowWidth,\n              height: this.props.windowHeight,\n            },\n            styles.container,\n          ]}\n        >\n          <View style={styles.hContainer}>\n            <Text style={styles.cancelButton} onPress={this._onCancel}>\n              Cancel\n            </Text>\n            <Text style={styles.playButton} onPress={this._onStart}>\n              Start\n            </Text>\n          </View>\n          <Demo\n            height={this.props.windowHeight - 64}\n            width={Math.min(this.props.windowWidth, 600)}\n            gamePlan={this.state.demoGamePlan}\n          />\n        </View>\n      );\n    }\n\n    return (\n      <View\n        style={[\n          {\n            width: this.props.windowWidth,\n            height: this.props.windowHeight,\n          },\n          styles.container,\n        ]}\n      >\n        <View style={styles.hContainer}>\n          <Text style={styles.cancelButton} onPress={this._onCancel}>\n            Cancel\n          </Text>\n          <Text style={styles.playButton} onPress={this._onStart}>\n            Start\n          </Text>\n        </View>\n        <View style={{ flex: 1, justifyContent: \"center\" }}>\n          <Text style={styles.headerText}>\n            {this.state.demoGamePlan.positions != null &&\n            this.state.demoGamePlan.colors != null\n              ? \"Dual\"\n              : \"\"}{\" \"}\n            {this.state.demoGamePlan.nBack}-Back{\"\\n\"}\n            {this.state.demoGamePlan.gameTurns -\n              this.state.demoGamePlan.nBack}{\" \"}\n            Turns\n          </Text>\n          <Text style={styles.playButton} onPress={this._onDemo}>\n            Demo\n          </Text>\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  headerText: {\n    textAlign: \"center\",\n    fontSize: 14,\n    color: \"black\",\n    fontWeight: \"bold\",\n  },\n  playButton: {\n    color: \"green\",\n    fontSize: 24,\n    textAlign: \"center\",\n    padding: 10,\n  },\n  cancelButton: {\n    color: \"red\",\n    fontSize: 24,\n    textAlign: \"center\",\n    padding: 10,\n  },\n  practiceButton: {\n    color: \"orange\",\n    fontSize: 24,\n    padding: 2,\n    marginRight: 5,\n  },\n  practiceInfoButton: {\n    padding: 6,\n  },\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 8,\n  },\n  header: {\n    flexDirection: \"row\",\n    padding: 10,\n  },\n  hContainer: {\n    justifyContent: \"center\",\n    flexDirection: \"row\",\n  },\n  hspacer: {\n    flex: 1,\n  },\n  cancel: {\n    width: 44,\n    height: 44,\n  },\n  nbacktext: {\n    textAlign: \"left\",\n    fontSize: 15,\n  },\n});\n","// @flow\nimport * as React from \"react\";\nimport {\n  Button,\n  Dimensions,\n  Text,\n  Vibration,\n  View,\n  StyleSheet,\n  TouchableOpacity,\n} from \"react-native\";\nimport {\n  getGameStateOnPositionPress,\n  getGameStateOnColorPress,\n  getGameStateOnTick,\n  getInitialGameState,\n  getCurrentIndex,\n  HIDDEN,\n  DISABLED,\n  NEUTRAL,\n  CORRECT,\n  INCORRECT,\n} from \"../gameLogic\";\nimport type {\n  ButtonState,\n  GamePlan,\n  GameState,\n  GameResult,\n} from \"../gameLogic\";\nimport Game from \"./Game\";\nimport LevelInfo from \"./LevelInfo\";\nimport type { ProgressMapLocation, MasteryLevel } from \"../progressMap\";\nimport type { StackNavigationProp, RouteProp } from \"@react-navigation/stack\";\n\nconst Margin = 10;\nconst Spacing = 1;\n\ntype State = {\n  isPlaying: boolean,\n  gamePlan?: GamePlan,\n  windowWidth: number,\n  windowHeight: number,\n};\n\nexport type Props = {|\n  isDebug: boolean,\n  onCompleteGame: (?GameResult) => void,\n  onCancel: () => void,\n  addBlurListener: (() => void) => () => void,\n  location: ProgressMapLocation,\n|};\n\nexport default class GameLevel extends React.Component<Props, State> {\n  state = {\n    isPlaying: false,\n    windowHeight: Dimensions.get(\"window\").height,\n    windowWidth: Dimensions.get(\"window\").width,\n  };\n\n  _onDimensionsChange = () => {\n    this.setState(() => {\n      return {\n        windowHeight: Dimensions.get(\"window\").height,\n        windowWidth: Dimensions.get(\"window\").width,\n      };\n    });\n  };\n\n  componentDidMount = async () => {\n    Dimensions.addEventListener(\"change\", this._onDimensionsChange);\n  };\n\n  componentWillUnmount = async () => {\n    Dimensions.removeEventListener(\"change\", this._onDimensionsChange);\n  };\n\n  _onStart = (gamePlan: GamePlan) => {\n    this.setState({\n      isPlaying: true,\n      gamePlan,\n    });\n  };\n\n  _onCompleteGame = (result: ?GameResult) => {\n    this.props.onCompleteGame(result);\n  };\n\n  render() {\n    if (this.state.isPlaying && this.state.gamePlan != null) {\n      return (\n        <Game\n          gamePlan={this.state.gamePlan}\n          isDebug={this.props.isDebug}\n          windowWidth={this.state.windowWidth}\n          windowHeight={this.state.windowHeight}\n          onCompleteGame={this._onCompleteGame}\n          addBlurListener={this.props.addBlurListener}\n        />\n      );\n    } else {\n      return (\n        <LevelInfo\n          location={this.props.location}\n          isDebug={this.props.isDebug}\n          windowWidth={this.state.windowWidth}\n          windowHeight={this.state.windowHeight}\n          onStart={this._onStart}\n          onCancel={this.props.onCancel}\n        />\n      );\n    }\n  }\n}\n","// @flow\nimport * as React from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport shuffle from \"../common/shuffle\";\nimport Grid from \"./Grid\";\nimport type { Settings } from \"../gameLogic\";\n\nconst Spacing = 1;\n\ntype Props = {\n  nBack: number,\n  colorsEnabled?: boolean,\n  positionsEnabled?: boolean,\n  settings: Settings,\n};\n\ntype State = { colors: Array<string>, positions: Array<number> };\n\nconst POSITIONS: Array<number> = [0, 5, 6, 1, 4, 3, 2, 8, 7];\n\nfunction generateState(settings: Settings): State {\n  return {\n    colors: shuffle(settings.colorValues),\n    positions: shuffle(POSITIONS),\n  };\n}\n\nexport default class HeaderHint extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = generateState(props.settings);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.nBack != this.props.nBack) {\n      this.setState(generateState(this.props.settings));\n    }\n  }\n\n  getSquaresForStep(step: number, isLast: boolean): Array<string> {\n    const colors = this.props.colorsEnabled || false;\n    const positions = this.props.positionsEnabled || false;\n\n    const index = positions\n      ? isLast\n        ? this.state.positions[0]\n        : this.state.positions[step]\n      : 0;\n    const color = colors\n      ? isLast\n        ? this.state.colors[0]\n        : this.state.colors[step]\n      : \"grey\";\n    const result = [];\n    for (let i = 0; i < 9; i++) {\n      result.push(\"white\");\n    }\n    result[index] = color;\n    return result;\n  }\n\n  render() {\n    const grids = [];\n\n    const gamePlan = this.props.positionsEnabled\n      ? { rows: 3, columns: 3 }\n      : { rows: 1, columns: 1 };\n\n    const squares = this.getSquaresForStep(0, false);\n    return (\n      <View style={styles.container}>\n        <Grid\n          margin={1}\n          width={26}\n          height={26}\n          gameState={{ squares }}\n          gamePlan={gamePlan}\n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  square: {\n    backgroundColor: \"white\",\n    position: \"absolute\",\n  },\n  container: {\n    flex: 1,\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n  },\n});\n","// @flow\nimport * as React from \"react\";\nimport {\n  View,\n  StyleSheet,\n  ScrollView,\n  Dimensions,\n  Platform,\n  TouchableWithoutFeedback,\n} from \"react-native\";\n\nimport LocationButton from \"./LocationButton\";\nimport type { GameResult, Settings } from \"../gameLogic\";\nimport type {\n  ProgressMapData,\n  ProgressMapLocation,\n  ProgressMapDataItem,\n  MasteryLevel,\n} from \"../progressMap\";\nimport {\n  getProgressMap,\n  MASTERY_LEVEL_IN_PROGRESS,\n  MASTERY_LEVEL_NONE,\n  MASTERY_LEVEL_MASTERED,\n  MASTERY_LEVEL_SKIPPED,\n} from \"../progressMap\";\n\ntype Props = {\n  onPressLocation: (ProgressMapLocation) => void,\n  progressMap: ProgressMapData,\n  windowHeight: number,\n  windowWidth: number,\n  backgroundColor: string,\n};\n\ntype State = {};\n\nexport default class MapImage extends React.Component<Props, State> {\n  state = {};\n\n  render() {\n    const height = this.props.progressMap.length * 54;\n    const width = Math.min(this.props.windowWidth, 600);\n\n    const buttons: React.Element<typeof LocationButton>[] = [];\n\n    this.props.progressMap.forEach((item: ProgressMapDataItem, y: number) => {\n      item.locations.forEach((location: ?ProgressMapLocation, x: number) => {\n        if (location != null) {\n          const loc: ProgressMapLocation = location;\n          const top = y * 54;\n          const left = (x + 0.5) * (width / 3) - 22;\n\n          buttons.push(\n            <LocationButton\n              key={\"LocationButton-\" + y + \"-\" + x}\n              style={{ position: \"absolute\", left, top }}\n              last3MasteryLevels={location.last3MasteryLevels}\n              onPress={() => this.props.onPressLocation(loc)}\n            />\n          );\n        }\n      });\n    });\n\n    return (\n      <View\n        style={{\n          alignItems: \"center\",\n        }}\n      >\n        <View style={{ width, height }}>{buttons}</View>\n      </View>\n    );\n  }\n}\n","// @flow\nimport * as React from \"react\";\nimport {\n  View,\n  StyleSheet,\n  ScrollView,\n  Dimensions,\n  Platform,\n  Text,\n  TouchableOpacity,\n} from \"react-native\";\nimport { getProgressMap } from \"../progressMap\";\nimport LocationButton from \"./LocationButton\";\nimport HeaderHint from \"./HeaderHint\";\nimport MapImage from \"./MapImage\";\nimport type { GameResult, Settings } from \"../gameLogic\";\nimport type {\n  ProgressMapData,\n  ProgressMapLocation,\n  ProgressMapDataItem,\n} from \"../progressMap\";\n\nconst NBACK_MINIMUM = 1;\nconst NBACK_MAXIMUM = 7;\n\ntype Props = {\n  onPressLocation: (ProgressMapLocation) => void,\n  onUpdateNBack: (number) => void,\n  results: GameResult[],\n  settings: Settings,\n  nBack: number,\n  windowHeight: number,\n  windowWidth: number,\n};\n\nfunction getBGFill(nBack: number): string {\n  const index = (nBack - 1) % NBACK_MAXIMUM;\n  const bgFills = [\n    \"#3b2bc4\",\n    \"#3fc42b\",\n    \"#bcc42b\",\n    \"#c4892b\",\n    \"#c42b2b\",\n    \"#c42bbc\",\n    \"#8e8a91\",\n  ];\n  return bgFills[index];\n}\n\ntype State = any;\n\nexport default class Menu extends React.Component<Props, State> {\n  scrollView: any = null;\n\n  _onPressLocation = (location: ProgressMapLocation) => {\n    this.props.onPressLocation(location);\n  };\n\n  _onPressLeft = () => {\n    this.props.onUpdateNBack(Math.max(this.props.nBack - 1, NBACK_MINIMUM));\n  };\n\n  _onPressRight = () => {\n    this.props.onUpdateNBack(Math.min(this.props.nBack + 1, NBACK_MAXIMUM));\n  };\n\n  _renderArrowButton = (\n    icon: string,\n    disabled: boolean,\n    onPress: () => void\n  ) => {\n    const color = disabled ? \"grey\" : \"black\";\n    return (\n      <TouchableOpacity\n        disabled={disabled}\n        style={styles.iconButton}\n        onPress={onPress}\n      >\n        <Text style={{ fontSize: 32, color: color }}>{icon}</Text>\n      </TouchableOpacity>\n    );\n  };\n\n  _renderHeader() {\n    const color = getBGFill(this.props.nBack);\n    const width = Math.min(this.props.windowWidth, 600);\n    return (\n      <View\n        style={{\n          width: this.props.windowWidth,\n          flex: 1,\n          alignItems: \"center\",\n        }}\n      >\n        <View\n          style={{\n            flexDirection: \"row\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            width,\n          }}\n        >\n          {this._renderArrowButton(\n            \"⇦\",\n            this.props.nBack == NBACK_MINIMUM,\n            this._onPressLeft\n          )}\n          <Text\n            style={{\n              textAlign: \"center\",\n              flex: 1,\n              fontSize: 14,\n              color: \"black\",\n              fontWeight: \"bold\",\n              flexDirection: \"row\",\n            }}\n          >\n            n-back = {this.props.nBack}\n          </Text>\n          {this._renderArrowButton(\n            \"⇨\",\n            this.props.nBack == NBACK_MAXIMUM,\n            this._onPressRight\n          )}\n        </View>\n      </View>\n    );\n  }\n\n  _renderGuide() {\n    const color = getBGFill(this.props.nBack);\n    const width = Math.min(this.props.windowWidth, 600);\n    return (\n      <View\n        style={{\n          width: this.props.windowWidth,\n          flex: 1,\n          alignItems: \"center\",\n        }}\n      >\n        <View\n          style={{\n            flexDirection: \"row\",\n            width,\n            paddingTop: 12,\n            paddingBottom: 16,\n          }}\n        >\n          <HeaderHint\n            settings={this.props.settings}\n            nBack={this.props.nBack}\n            positionsEnabled={true}\n          />\n          <HeaderHint\n            settings={this.props.settings}\n            nBack={this.props.nBack}\n            colorsEnabled={true}\n          />\n          <HeaderHint\n            settings={this.props.settings}\n            nBack={this.props.nBack}\n            positionsEnabled={true}\n            colorsEnabled={true}\n          />\n        </View>\n      </View>\n    );\n  }\n\n  render() {\n    // TODO update getProgressMap to only generate the desired nBack level\n    const progressMap = getProgressMap(\n      this.props.results,\n      this.props.settings\n    ).filter((item: ProgressMapDataItem) => {\n      return (\n        item.locations.filter(\n          (location: ?ProgressMapLocation) =>\n            location != null && location.gameLevel.nBack == this.props.nBack\n        ).length > 0\n      );\n    });\n    const backgroundColor = getBGFill(this.props.nBack);\n    return (\n      <View>\n        {this._renderHeader()}\n        {this._renderGuide()}\n        <MapImage\n          backgroundColor={backgroundColor}\n          progressMap={progressMap}\n          onPressLocation={this._onPressLocation}\n          windowHeight={this.props.windowHeight}\n          windowWidth={this.props.windowWidth}\n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  iconButton: {\n    flex: 1,\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n  },\n});\n","// @flow\nimport * as React from \"react\";\n\nimport { StyleSheet, View, Dimensions } from \"react-native\";\nimport type { GameResult, Settings } from \"../gameLogic\";\nimport type { ProgressMapLocation } from \"../progressMap\";\nimport { getProgressMap } from \"../progressMap\";\n\nimport Map from \"./Map\";\n\nexport type Props = {|\n  storePosition: (number) => void,\n  setLocation: (ProgressMapLocation) => void,\n  settings: ?Settings,\n  results: GameResult[],\n  position: number,\n|};\n\ntype State = {\n  windowHeight: number,\n  windowWidth: number,\n  currentLocation: ?ProgressMapLocation,\n};\n\nexport default class Menu extends React.Component<Props, State> {\n  state = {\n    currentLocation: null,\n    windowHeight: Dimensions.get(\"window\").height,\n    windowWidth: Dimensions.get(\"window\").width,\n  };\n\n  _onDimensionsChange = () => {\n    this.setState(() => {\n      return {\n        windowHeight: Dimensions.get(\"window\").height,\n        windowWidth: Dimensions.get(\"window\").width,\n      };\n    });\n  };\n\n  componentDidMount = async () => {\n    Dimensions.addEventListener(\"change\", this._onDimensionsChange);\n  };\n\n  _onPressLocation = (location: ProgressMapLocation) => {\n    this.props.setLocation(location);\n  };\n\n  render() {\n    const { results, settings } = this.props;\n    if (results == null || settings == null) {\n      return null;\n    }\n    const progressMap = getProgressMap(results, settings);\n\n    /** todo, only render scrollview on iOS/Android */\n    return (\n      <View style={[{ width: this.state.windowWidth }, styles.container]}>\n        <Map\n          nBack={this.props.position}\n          results={results}\n          settings={settings}\n          onPressLocation={this._onPressLocation}\n          onUpdateNBack={this.props.storePosition}\n          windowHeight={this.state.windowHeight}\n          windowWidth={this.state.windowWidth}\n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {},\n  hContainer: {\n    padding: 8,\n    margin: \"auto\",\n  },\n});\n","// @flow\nimport React, { useState } from \"react\";\nimport GameLevel from \"./GameLevel\";\nimport Menu from \"./Menu\";\nimport type { GameResult, GamePlan, Settings } from \"../gameLogic\";\nimport type { ProgressMapLocation } from \"../progressMap\";\n\nexport type StateProps = {|\n  settings: ?Settings,\n  results: GameResult[],\n  position: number,\n  isDebug: boolean,\n|};\n\nexport type DispatchProps = {|\n  onCompleteGame: (?GameResult) => void,\n  storePosition: (number) => void,\n|};\n\nexport type OwnProps = {||};\n\nexport type Props = {| ...StateProps, ...DispatchProps, ...OwnProps |};\n\nexport default function NBack(props: Props) {\n  const [location, setLocation] = useState((null: ?ProgressMapLocation));\n  if (location == null) {\n    return (\n      <Menu\n        results={props.results}\n        storePosition={props.storePosition}\n        settings={props.settings}\n        position={props.position}\n        setLocation={setLocation}\n      />\n    );\n  } else {\n    const onCompleteGame = (result: ?GameResult) => {\n      setLocation(null);\n      props.onCompleteGame(result);\n    };\n\n    const addBlurListener = (callback: () => void) => {\n      window.addEventListener(\"blur\", callback);\n      return () => {\n        window.removeEventListener(\"blur\", callback);\n      };\n    };\n\n    const onCancel = () => {\n      setLocation(null);\n    };\n\n    return (\n      <GameLevel\n        isDebug={props.isDebug}\n        location={location}\n        onCompleteGame={onCompleteGame}\n        addBlurListener={addBlurListener}\n        onCancel={onCancel}\n      />\n    );\n  }\n}\n","// @flow\n\nexport const DEFAULT_SETTINGS: Settings = {\n  nBack: 2,\n  rows: 3,\n  columns: 3,\n  turns: 20,\n  positionsEnabled: true,\n  colorsEnabled: true,\n  colorValues: [\"red\", \"blue\", \"green\", \"yellow\", \"orange\", \"purple\"],\n  onDuration: 4000,\n  offDuration: 1000,\n  progressMap: {\n    offset: 0,\n    spacing: 3,\n    minTurns: 4,\n    maxTurns: 20,\n    minTurnsPerMinute: 10,\n    maxTurnsPerMinute: 10,\n    steps: 9,\n    minNBack: 1,\n    maxNBack: 10,\n  },\n  weeklyGoal: 7,\n};\n\nexport type Settings = {\n  nBack: number,\n  rows: number,\n  columns: number,\n  turns: number,\n  positionsEnabled: boolean,\n  colorsEnabled: boolean,\n  colorValues: string[],\n  onDuration: number,\n  offDuration: number,\n  debugEnabled?: boolean,\n  progressMap: {\n    offset: number,\n    spacing: number,\n    minTurns: number,\n    maxTurns: number,\n    minTurnsPerMinute: number,\n    maxTurnsPerMinute: number,\n    steps: number,\n    minNBack: number,\n    maxNBack: number,\n  },\n  weeklyGoal: number,\n};","// @flow\nimport NBack from \"./components/NBack\";\nimport React, { useState, useEffect } from \"react\";\nimport type { GameResult } from \"./gameLogic\";\nimport type { Props, OwnProps } from \"./components/NBack\";\nimport { DEFAULT_SETTINGS } from \"./constants\";\nimport { AsyncStorage } from \"react-native\";\n\nconst POSITION_KEY = \"mapNBack\";\nconst RESULTS_KEY = \"results\";\nconst DEFAULT_NBACK_LEVEL = 1;\n\nfunction setBodyStyle() {\n  const body = document.body;\n  if (body != null) {\n    body.style = \"background: #EEEEEE;\";\n  }\n}\n\nexport default function MainNBack() {\n  const [position, setPosition] = useState(1);\n  const [results, setResults] = useState(([]: GameResult[]));\n  useEffect(() => {\n    async function loadAll() {\n      const pval = await AsyncStorage.getItem(POSITION_KEY);\n      setPosition(parseInt(pval) || DEFAULT_NBACK_LEVEL);\n      // const rval = await AsyncStorage.getItem(RESULTS_KEY);\n      // if (rval != null) {\n      //   try {\n      //     const res = JSON.parse(rval) || [];\n      //     setResults(res);\n      //   } catch (e) {\n      //     // no worries\n      //   }\n      // }\n    }\n    setBodyStyle();\n    loadAll();\n\n    window.onmessage = function(e) {\n      if (typeof e.data === \"string\") {\n        //\n        if (e.data.startsWith(window.location.href + \";data;\")) {\n          // extract the data string\n          const res = e.data\n            .split(\";\")\n            .slice(2)\n            .map((data) => JSON.parse(data));\n          setResults(res);\n        }\n      }\n    };\n    window.top.postMessage(window.location.href + \";ready\", \"*\");\n  }, []);\n  function storePosition(p: number) {\n    setPosition(p);\n    AsyncStorage.setItem(POSITION_KEY, (p || DEFAULT_NBACK_LEVEL).toString());\n  }\n  function onCompleteGame(result: ?GameResult) {\n    if (result != null) {\n      const updated = [...results, result];\n      setResults(updated);\n      async function storeResults() {\n        AsyncStorage.setItem(RESULTS_KEY, JSON.stringify(updated));\n      }\n      storeResults();\n      const message =\n        window.location.href + \";complete;\" + JSON.stringify(result);\n      window.top.postMessage(message, \"*\");\n    }\n  }\n\n  return (\n    <NBack\n      isDebug={false}\n      settings={DEFAULT_SETTINGS}\n      onCompleteGame={onCompleteGame}\n      storePosition={storePosition}\n      position={position}\n      results={results}\n    />\n  );\n}\n","// @flow\nimport * as React from \"react\";\nimport MainNBack from \"./src/MainNBack.js\";\n\nexport default function App(props: any) {\n  return <MainNBack {...props} />;\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/levelled-nback/expo-service-worker.js', { scope: '/levelled-nback/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}